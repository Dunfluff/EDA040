package lift;

import se.lth.cs.realtime.semaphore.Semaphore;

public class LiftMonitor {
	private final static int FLOORS = 7;
    private int here = 0;
    private int there = 0;
    private int load = 0;
    private int direction = 1;
    private int[] waitEntry = new int[FLOORS];
    private int[] waitExit = new int[]{-1, -1, -1, -1};
    private LiftView liftView;

    public LiftMonitor(LiftView liftView) {
        this.liftView = liftView;
    }

    public synchronized int move() {
    	if(there == FLOORS -1){
    		direction = -1;
    	}
    	if(there == 0){
    		direction = 1;
    	}
		return there + direction;
    }

    private synchronized int waitingList() {
    	int waitList = 0;

        for (int count : waitEntry)
        	waitList += count;

        return waitList;

    }

    public synchronized int stop() {
    	here = there;
    	notifyAll();
    	
    	while ((load <= 0 && waitingList() == 0) || (waitEntry[here] > 0 && load < 4) || (waitExit[0] == here || waitExit[1] == here || waitExit[2] == here || waitExit[3] == here)) {
            try { wait(); }
            catch (InterruptedException e) { e.printStackTrace(); }
        }
    	
		return here;
    }

    public synchronized void call(int from, int to) {
    	
    }

}
