package todo;
import done.*;
import se.lth.cs.realtime.semaphore.Semaphore;

/**
 * Main class of alarm-clock application.
 * Constructor providing access to IO.
 * Method start corresponding to main,
 * with closing down done in terminate.
 */
public class AlarmClock {

	private static ClockInput	input;
	private static ClockOutput	output;
	private static Semaphore	signal; 
	private Manager man;
	private TThread t;

	/**
	 * Create main application and bind attributes to device drivers.
	 * @param i The input from simulator/emulator/hardware.
	 * @param o Dito for output.
	 */
	public AlarmClock(ClockInput i, ClockOutput o) {
		input = i;
		output = o;
		signal = input.getSemaphoreInstance();
		man = new Manager(input, output);
		start();
	}
	

	/**
	 * Tell threads to terminate and wait until they are dead.
	 */
	public void terminate() {
		man.kill();
		output.console("AlarmClock exit.");
	}
	
	/**
	 * Create thread objects, and start threads
	 */
	public void start() {
		new TThread(man).start();
		new BThread(input, man).start();
	}
	
//	class InputOutputTest implements Runnable {
//		public void run() {
//			long curr; int time, mode; boolean flag;
//			output.console("Click on GUI to obtain key presses!");
//			while (!Thread.currentThread().isInterrupted()) {
//				curr = System.currentTimeMillis();
//				time = input.getValue();
//				flag = input.getAlarmFlag();
//				mode = input.getChoice();
//				output.doAlarm();
//				output.console(curr, time, flag, mode);
//				if (time == 120000) break; // Swe: Bryter för middag
//				signal.take();
//			}
//			output.console("IO-test terminated #");
//		}
//
//	}
	
}
