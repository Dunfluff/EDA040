/*
 * Real-time and concurrent programming course, laboratory 3
 * Department of Computer Science, Lund Institute of Technology
 *
 * PP 980812 Created
 * PP 990924 Revised
 */

package todo;

import done.AbstractWashingMachine;

/**
 * Program 3 of washing machine. Does the following:
 * <UL>
 * <LI>Switches off heating
 * <LI>Switches off spin
 * <LI>Pumps out water
 * <LI>Unlocks the hatch.
 * </UL>
 */
class WashingProgram2 extends WashingProgram {

	// ------------------------------------------------------------- CONSTRUCTOR

	/**
	 * @param mach
	 *            The washing machine to control
	 * @param speed
	 *            Simulation speed
	 * @param tempController
	 *            The TemperatureController to use
	 * @param waterController
	 *            The WaterController to use
	 * @param spinController
	 *            The SpinController to use
	 */
	long sleepTime;

	public WashingProgram2(AbstractWashingMachine mach, double speed, TemperatureController tempController,
			WaterController waterController, SpinController spinController) {
		super(mach, speed, tempController, waterController, spinController);
	}

	// ---------------------------------------------------------- PUBLIC METHODS

	/**
	 * This method contains the actual code for the washing program. Executed
	 * when the start() method is called.
	 */
	protected void wash() throws InterruptedException {
		// Lock hatch
		myMachine.setLock(true);
		
		preWash();
		mainWash();
		for(int i = 0; i < 5; i++){
			rinse();
		}
		
		// Unlock
		myMachine.setLock(false);
	}

	private void preWash() {
		// fill water
		myWaterController.putEvent(new WaterEvent(this, WaterEvent.WATER_FILL, 0.8));
		mailbox.doFetch();

		// stop filling set idle set water temp
		myWaterController.putEvent(new WaterEvent(this, WaterEvent.WATER_IDLE, 0.8));
		myTempController.putEvent(new TemperatureEvent(this, TemperatureEvent.TEMP_SET, 40.0));
		mailbox.doFetch();

		// wash for 15 min
		mySpinController.putEvent(new SpinEvent(this, SpinEvent.SPIN_SLOW));
		sleepTime = System.currentTimeMillis() + (long) ((60 * 15 * 1000) / mySpeed);
		while (System.currentTimeMillis() < sleepTime)
			sleep(sleepTime - System.currentTimeMillis());

		// turn off spinn
		mySpinController.putEvent(new SpinEvent(this, SpinEvent.SPIN_OFF));
		myTempController.putEvent(new TemperatureEvent(this, TemperatureEvent.TEMP_IDLE, 0));
		myWaterController.putEvent(new WaterEvent(this, WaterEvent.WATER_DRAIN, 0));
		mailbox.doFetch();
		
		myWaterController.putEvent(new WaterEvent(this, WaterEvent.WATER_IDLE, 0));
	}

	private void mainWash() {
		// fill water
		myWaterController.putEvent(new WaterEvent(this, WaterEvent.WATER_FILL, 0.8));
		mailbox.doFetch();

		// stop filling set idle set water temp
		myWaterController.putEvent(new WaterEvent(this, WaterEvent.WATER_IDLE, 0.8));
		myTempController.putEvent(new TemperatureEvent(this, TemperatureEvent.TEMP_SET, 90.0));
		mailbox.doFetch();

		// wash for 30 min
		mySpinController.putEvent(new SpinEvent(this, SpinEvent.SPIN_SLOW));
		sleepTime = System.currentTimeMillis() + (long) ((60 * 30 * 1000) / mySpeed);
		while (System.currentTimeMillis() < sleepTime)
			sleep(sleepTime - System.currentTimeMillis());

		// turn off spinn
		mySpinController.putEvent(new SpinEvent(this, SpinEvent.SPIN_OFF));
		myTempController.putEvent(new TemperatureEvent(this, TemperatureEvent.TEMP_IDLE, 0));
		myWaterController.putEvent(new WaterEvent(this, WaterEvent.WATER_DRAIN, 0));
		mailbox.doFetch();
		
		myWaterController.putEvent(new WaterEvent(this, WaterEvent.WATER_IDLE, 0));

	}
	private void rinse() {
		myWaterController.putEvent(new WaterEvent(this, WaterEvent.WATER_FILL, 0.8));
		
		mailbox.doFetch(); // Wait for Ack

		// Set water regulation to idle => drain pump stops
		myWaterController.putEvent(new WaterEvent(this,
				WaterEvent.WATER_IDLE,
				0.0));
		
		mySpinController.putEvent(new SpinEvent(this, SpinEvent.SPIN_SLOW));
		sleepTime = System.currentTimeMillis() + (long) ((60 * 2 * 1000) / mySpeed);
		mySpinController.putEvent(new SpinEvent(this,SpinEvent.SPIN_OFF));
		myWaterController.putEvent(new WaterEvent(this,WaterEvent.WATER_DRAIN, 0.0));
	}
}
