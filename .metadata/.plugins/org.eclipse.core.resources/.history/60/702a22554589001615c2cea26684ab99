package lift;


public class LiftMonitor {
	private final static int FLOORS = 7;
	private int here = 0;
	private int there = 0;
	private int load = 0;
	private int direction = 1;
	private int[] waitEntry = new int[FLOORS];
	private int[] waitExit = new int[] { -1, -1, -1, -1 };
	private LiftView liftView;

	public LiftMonitor(LiftView liftView) {
		this.liftView = liftView;
	}

	public synchronized int move() {
		if (here == FLOORS - 1) {
			direction = -1;
		} else if (here == 0) {
			direction = 1;
		}
		there += direction;
		return there;
	}


	public synchronized int stop() {
		here = there;
		notifyAll();

		try {
			while ((waitEntry[here] > 0 && load < 4) || quitters()) {
				wait();
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

		return here;
	}

	public synchronized void readyForARide(int from, int to) {
		waitEntry[from]++;
		liftView.drawLevel(from, waitEntry[from]);
		notifyAll();
		try {
			while (here != there || from != here || load == 4) {
				wait();
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		int mySpot = nextSpot();
		enterLift(from, to, mySpot);
		notifyAll();
		try {
			while (here != there || here != to) {
				wait();
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		exitLift(mySpot);
		notifyAll();

	}

	private void exitLift(int mySpot) {
		waitExit[mySpot] = -1;
		load--;
		liftView.drawLift(here, load);
	}

	private void enterLift(int from, int to, int mySpot) {
		waitExit[mySpot] = to;
		load++;
		waitEntry[from]--;
		liftView.drawLevel(here, waitEntry[from]);
		liftView.drawLift(here, load);
	}

	private boolean quitters() {
		for (int i : waitExit) {
			if (i == here) {
				return true;
			}
		}
		return false;
	}

	private int nextSpot() {
		int index = 0;
		for (int i : waitExit) {
			if (i < 0) {
				return index;
			}
			index++;
		}
		return -1;
	}

}
